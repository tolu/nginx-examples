#
# this is our config, copied into the container
#

##############
# Enable qzip (http://wiki.nginx.org/HttpGzipModule)
# 
gzip on;
gzip_comp_level 6; # compression level [1-9]
gzip_vary on; # insert "Vary: Accept-Encoding" when enabled
# gzip_min_length  1000; # min lengt from "Content-Length", defaults to 20
gzip_proxied any; # enable gzip for all proxied requests, defaults to "off"

# enable gzip for specific MIME types, default is "text/html"
gzip_types text/plain text/html text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
# set number and size of gzip buffers, size defaults to one "memory page", depending on platform that is 4K or 8K
gzip_buffers 16 8k;
##############

###############
# Enable cache and define local path for where to keep cached files
#   "levels=1:2"       set directory depth
#   "keys_zone=one:8m" name this cache "one" and set size of shared memory zone (8m) used for metadata
#   "max_size=300m"    set total cache max size, if not set cache grows to consume all available space
#   "inactive=600m"    expire time for unused assets, defaults to 10m (minutes)
proxy_cache_path  /var/cache/nginx levels=1:2 keys_zone=one:8m max_size=3000m inactive=60m;

proxy_temp_path /var/tmp;               # cached files are first written to temporary location, define where
proxy_cache_key $request_uri$scheme;    # set cache key, defaults to: $scheme$proxy_host$request_uri
###############

# define upstream server
upstream nodeserver {
    # define backend (set of) server(s)
    # "nodebackend" is the name of the service in docker-compose
    server nodebackend;
    # cache connections for better performance
    # this is minimum of cached connections
    keepalive 16;
}

server {
    listen       80;
    server_name  _;

    ######### proxy and cache static files ##############
    location ~* \.(css|js|ico) {
        proxy_cache one;
        access_log off;                      # turn off access log for static files
        expires 10;                          # add Cache-Control and Expires headers. Values: time | epoch | max | off
    
        # cache 200, 301, 302 responses for 1 minute
        # to cache all responses set: proxy_cache_valid any     1m;
        # to cache per status set:    proxy_cache_valid 200 302 5m;
        proxy_cache_valid 20;
    
        # include cache status header with potential values
        # [HIT, MISS, BYPASS, EXPIRED, STALE, UPDATING, REVALIDATED]
        add_header X-Cache-Status $upstream_cache_status;

        # define conditions when response will not be taken from cache
        # proxy_cache_bypass  [$http_cache_control | $http_authorization | $cookie_nocache];
        # bypasses cache if any provided argument is not empty and not equal to "0"
        
        proxy_pass http://nodeserver;
        include /etc/nginx/proxy.conf;
    }

    ########### proxy other requests ################
    location / {
        proxy_pass http://nodeserver;
        include /etc/nginx/proxy.conf;
    }
    ################################################
}
